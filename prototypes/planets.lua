---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by heyqule.
--- DateTime: 1/19/2025 2:33 PM
---

if not mods['space-age'] then
    return
end

local asteroid_util = require("__space-age__.prototypes.planet.asteroid-spawn-definitions")
local MapGenFunctions = require("__erm_libs__/prototypes/map_gen")
local SoundUtil = require('__erm_libs__/prototypes/sound_util')

local earth = data.raw.planet.earth

if not earth then
    earth = util.table.deepcopy(data.raw["planet"]["nauvis"])
end    

earth.name = "earth"
earth.gravity_pull = 9.8
earth.distance = 15
earth.orientation = 120 / 360
earth.magnitude = 1
earth.order = "a[earth]"
earth.icon = "__erm_redarmy__/graphics/earth-icon.png"
earth.starmap_icon = "__erm_redarmy__/graphics/earth.png"
earth.starmap_icon_size = 1024
earth.surface_properties.gravity = 9.8
earth.subgroup = "planets"
earth.pollutant_type = "pollution"
earth.asteroid_spawn_influence = 1
earth.asteroid_spawn_definitions = asteroid_util.spawn_definitions(asteroid_util.nauvis_gleba, 0.9)

MapGenFunctions.remove_enemy_autoplace_controls(earth.map_gen_settings.autoplace_controls)
earth.map_gen_settings.autoplace_controls[AUTOCONTROL_NAME] = {}

data:extend({earth})

data.extend({
    --- space connection
    {
        type = "space-connection",
        name = "nauvis-earth",
        subgroup = "planet-connections",
        from = "nauvis",
        to = "earth",
        order = "nauvis-earth",
        length = 20000,
        asteroid_spawn_definitions = asteroid_util.spawn_definitions(asteroid_util.nauvis_gleba)
    },
    --- unlock tech
    {
        type = "technology",
        name = "planet-discovery-earth",
        icons = {
            {
                icon = "__erm_redarmy__/graphics/earth-icon.png",
                icon_size = 64,
            },
            {
                icon = "__core__/graphics/icons/technology/constants/constant-planet.png",
                icon_size = 128,
                scale = 0.5,
                shift = { 50, 50 }
            }
        },
        essential = false,
        effects = {
            {
                type = "unlock-space-location",
                space_location = "earth",
                use_icon_overlay_constant = true
            },
        },
        prerequisites = { "space-platform-thruster", "landfill" },
        unit = {
            count = 1000,
            ingredients = {
                { "automation-science-pack", 1 },
                { "logistic-science-pack", 1 },
                { "chemical-science-pack", 1 },
                { "space-science-pack", 1 }
            },
            time = 60
        }
    },
})

if mods["alien-biomes"] then
    -- AB wipes autoplace spec from them and cause them to crash. Aiur won"t get rock till they fix it. 
    local planet = data.raw.planet.earth
    local map_gen = planet.map_gen_settings
    map_gen.autoplace_settings.decorative.settings["medium-rock"] = nil
    map_gen.autoplace_settings.decorative.settings["small-rock"] = nil
    map_gen.autoplace_settings.decorative.settings["tiny-rock"] = nil
    map_gen.autoplace_settings.decorative.settings["small-sand-rock"] = nil

    map_gen.autoplace_settings.decorative.settings["medium-sand-rock"] = nil
    map_gen.autoplace_settings.decorative.settings["sand-dune-decal"] = nil

    map_gen.autoplace_settings.entity.settings["huge-rock"] = nil
    map_gen.autoplace_settings.entity.settings["big-rock"] = nil
    map_gen.autoplace_settings.entity.settings["big-sand-rock"] = nil

    map_gen.autoplace_controls.rocks = nil
end


if mods['starcraft-music'] then
    local source_path = "__starcraft-music__/sounds/"
    data:extend({
        {
            type = "ambient-sound",
            planet = "earth",
            track_type = "main-track",
            name = "earth-terran-1",
            sound = { filename = source_path .. "Terran One.ogg" }
        },
        {
            type = "ambient-sound",
            planet = "earth",
            track_type = "main-track",
            name = "earth-terran-2",
            sound = { filename = source_path .. "Terran Two.ogg" }
        },
        {
            type = "ambient-sound",
            planet = "earth",
            track_type = "main-track",
            name = "earth-terran-3",
            sound = { filename = source_path .. "Terran Three.ogg" }
        },
    })
else
    data:extend(SoundUtil.dupe_planet_music('nauvis','earth'))
end 